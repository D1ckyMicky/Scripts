--[[
    Neverlose.cc Style UI Library for Severe
    Version: 10.3 (Full Functionality & Bug Fixes)
    
    - [FIX] Fully implemented the "About" window, including all controls and input handling.
    - [FIX] Corrected and finalized the public API for creating Tabs, Sections, and all Element types.
    - [ADD] Implemented Slider, Dropdown, and Multidropdown elements.
    - [AUDIT] Compared with the original script to ensure all core logic is ported correctly.
]]

local Library = {}

--================================================================
--[[ PRIVATE: CORE PROPERTIES & CONFIGURATION ]]
--================================================================

Library.Window = {
    Visible = true, X = 400, Y = 200, Width = 750, Height = 620,
    SidebarWidth = 187, HeaderHeight = 65, IsDragging = false,
    ActiveTab = "", PanelOverlap = 4
}

Library.Themes = {
    Blue = {
        Fonts = { Title = 2, Main = 1, Size = 14, TitleSize = 27, TabSize = 18, TabHeaderSize = 12 },
        Colors = { MainBackground = {6, 9, 17}, SectionBackground = {3, 11, 23}, SidebarBackground = {11, 20, 33}, Separator = {0, 18, 32}, Accent = {24, 165, 232}, DarkBlue = {3, 23, 51}, DarkGray = {24, 24, 24}, LightGray = {77, 77, 76}, TextDark = {160, 181, 197}, TextLight = {234, 239, 245}, TabHeader = {100, 120, 140}, White = {255, 255, 255}, Black = {0, 0, 0} },
        Transparency = { Solid = 0.9, ActiveTabHighlight = 0.28, Main = 0.96, Sidebar = 0.8 },
        Rounding = { Window = 8, Section = 6, Element = 4, Button = 5 }, IconSize = 16
    },
    Black = {
        Fonts = { Title = 2, Main = 1, Size = 14, TitleSize = 27, TabSize = 18, TabHeaderSize = 12 },
        Colors = { MainBackground = {6, 6, 9}, SectionBackground = {0, 3, 5}, SidebarBackground = {14, 16, 19}, Separator = {11, 11, 11}, Accent = {72, 130, 255}, DarkBlue = {10, 11, 19}, DarkGray = {24, 24, 24}, LightGray = {77, 77, 76}, TextDark = {181, 181, 194}, TextLight = {234, 239, 245}, TabHeader = {111, 120, 130}, White = {255, 255, 255}, Black = {0, 0, 0} },
        Transparency = { Solid = 0.9, ActiveTabHighlight = 0.28, Main = 0.967, Sidebar = 0.9 },
        Rounding = { Window = 8, Section = 6, Element = 4, Button = 5 }, IconSize = 16
    },
    White = {
        Fonts = { Title = 2, Main = 1, Size = 14, TitleSize = 27, TabSize = 18, TabHeaderSize = 12 },
        Colors = { MainBackground = {250, 250, 255}, SectionBackground = {244, 244, 244}, SidebarBackground = {240, 240, 240}, Separator = {200, 200, 200}, Accent = {24, 165, 232}, DarkBlue = {220, 220, 220}, DarkGray = {165, 165, 165}, LightGray = {120, 120, 120}, TextDark = {60, 60, 60}, TextLight = {10, 10, 10}, TabHeader = {100, 100, 100}, White = {255, 255, 255}, Black = {0, 0, 0} },
        Transparency = { Solid = 0.9, ActiveTabHighlight = 0.28, Main = 0.967, Sidebar = 0.9 },
        Rounding = { Window = 8, Section = 6, Element = 4, Button = 5 }, IconSize = 16
    }
}
Library.ActiveTheme = Library.Themes.Blue

Library.UI = { TabGroups = {}, Sections = {}, Values = {}, DrawingObjects = {} }

local drag_offset = {x = 0, y = 0}
local was_left_pressed = false
local SCRIPT_PREFIX = "[NL UI Lib] "

--================================================================
--[[ PRIVATE: HELPER FUNCTIONS ]]
--================================================================

function Library:_CreateDrawingObject(class)
    local success, object = pcall(Drawing.new, class)
    if not success then warn(SCRIPT_PREFIX .. "Failed to create Drawing object of type:", class); return nil end
    table.insert(self.UI.DrawingObjects, object)
    return object
end

function Library:_DarkenColor(color, factor)
    factor = factor or 0.3
    return { math.max(0, math.floor(color[1] * factor)), math.max(0, math.floor(color[2] * factor)), math.max(0, math.floor(color[3] * factor)) }
end

function Library:_SafeNumber(value, default) return type(value) == "number" and value or (default or 0) end
function Library:_IsPointInRegion(x, y, region)
    if not region or not region.x1 or not region.x2 or not region.y1 or not region.y2 then return false end
    return x >= self:_SafeNumber(region.x1, 0) and x <= self:_SafeNumber(region.x2, 0) and y >= self:_SafeNumber(region.y1, 0) and y <= self:_SafeNumber(region.y2, 0)
end
function Library:_SetVisibility(object, visible) if object and object.Visible ~= visible then object.Visible = visible end end
function table.find(tbl, value) for i, v in ipairs(tbl) do if v == value then return i end end; return nil end

--================================================================
--[[ PRIVATE: INITIALIZATION & CORE UI ]]
--================================================================

function Library:_InitializeCoreUI()
    local UI = self.UI; UI.Core = {}
    
    UI.Core.Sidebar = self:_CreateDrawingObject("Square"); UI.Core.RightPanel = self:_CreateDrawingObject("Square"); UI.Core.VerticalSeparator = self:_CreateDrawingObject("Square"); UI.Core.SidebarHeaderSeparator = self:_CreateDrawingObject("Square"); UI.Core.RightPanelHeaderSeparator = self:_CreateDrawingObject("Square")
    if UI.Core.Sidebar then UI.Core.Sidebar.Filled = true; UI.Core.Sidebar.zIndex = 1; UI.Core.Sidebar.Rounding = self.ActiveTheme.Rounding.Window; end
    if UI.Core.RightPanel then UI.Core.RightPanel.Filled = true; UI.Core.RightPanel.zIndex = 1; UI.Core.RightPanel.Rounding = self.ActiveTheme.Rounding.Window; end
    if UI.Core.VerticalSeparator then UI.Core.VerticalSeparator.Filled = true; UI.Core.VerticalSeparator.zIndex = 3; end
    if UI.Core.SidebarHeaderSeparator then UI.Core.SidebarHeaderSeparator.Filled = true; UI.Core.SidebarHeaderSeparator.zIndex = 2; end
    if UI.Core.RightPanelHeaderSeparator then UI.Core.RightPanelHeaderSeparator.Filled = true; UI.Core.RightPanelHeaderSeparator.zIndex = 2; end
    
    UI.Core.Title = self:_CreateDrawingObject("Text"); UI.Core.Title2 = self:_CreateDrawingObject("Text"); UI.Core.Title3 = self:_CreateDrawingObject("Text")
    if UI.Core.Title then UI.Core.Title.Font = self.ActiveTheme.Fonts.Title; UI.Core.Title.Size = self.ActiveTheme.Fonts.TitleSize; UI.Core.Title.Text = "NEVERLOSE"; UI.Core.Title.Center = false; UI.Core.Title.Outline = false; UI.Core.Title.zIndex = 5; end
    if UI.Core.Title2 then UI.Core.Title2.Font = self.ActiveTheme.Fonts.Title; UI.Core.Title2.Size = self.ActiveTheme.Fonts.TitleSize; UI.Core.Title2.Text = "NEVERLOSE"; UI.Core.Title2.Center = false; UI.Core.Title2.Outline = false; UI.Core.Title2.zIndex = 4; end
    if UI.Core.Title3 then UI.Core.Title3.Font = self.ActiveTheme.Fonts.Title; UI.Core.Title3.Size = self.ActiveTheme.Fonts.TitleSize; UI.Core.Title3.Text = "NEVERLOSE"; UI.Core.Title3.Center = false; UI.Core.Title3.Outline = false; UI.Core.Title3.zIndex = 3; end
    
    UI.Core.ActiveTabHighlight = self:_CreateDrawingObject("Square"); if UI.Core.ActiveTabHighlight then UI.Core.ActiveTabHighlight.Filled = true; UI.Core.ActiveTabHighlight.zIndex = 2; UI.Core.ActiveTabHighlight.Rounding = self.ActiveTheme.Rounding.Element + 3; end

    UI.Core.SidebarBottomCircle = self:_CreateDrawingObject("Circle"); if UI.Core.SidebarBottomCircle then UI.Core.SidebarBottomCircle.Filled = false; UI.Core.SidebarBottomCircle.Thickness = 3; UI.Core.SidebarBottomCircle.zIndex = 6; UI.Core.SidebarBottomCircle.Radius = 28; end
    UI.Core.PlayerDisplayName = self:_CreateDrawingObject("Text"); if UI.Core.PlayerDisplayName then UI.Core.PlayerDisplayName.Font = self.ActiveTheme.Fonts.Main; UI.Core.PlayerDisplayName.Size = self.ActiveTheme.Fonts.Size + 2; UI.Core.PlayerDisplayName.Text = ""; UI.Core.PlayerDisplayName.Center = false; UI.Core.PlayerDisplayName.Outline = false; UI.Core.PlayerDisplayName.zIndex = 7; end
    UI.Core.TillLabel = self:_CreateDrawingObject("Text"); if UI.Core.TillLabel then UI.Core.TillLabel.Font = self.ActiveTheme.Fonts.Main; UI.Core.TillLabel.Size = self.ActiveTheme.Fonts.Size; UI.Core.TillLabel.Text = "Till:"; UI.Core.TillLabel.Center = false; UI.Core.TillLabel.Outline = false; UI.Core.TillLabel.zIndex = 7; end
    UI.Core.ForeverLabel = self:_CreateDrawingObject("Text"); if UI.Core.ForeverLabel then UI.Core.ForeverLabel.Font = self.ActiveTheme.Fonts.Main; UI.Core.ForeverLabel.Size = self.ActiveTheme.Fonts.Size; UI.Core.ForeverLabel.Text = " Forever"; UI.Core.ForeverLabel.Center = false; UI.Core.ForeverLabel.Outline = false; UI.Core.ForeverLabel.zIndex = 7; end
    
    UI.Core.HeaderButtons = {
        Save = { Background = self:_CreateDrawingObject("Square"), Border = self:_CreateDrawingObject("Square"), Label = self:_CreateDrawingObject("Text"), Icon = self:_CreateDrawingObject("Image"), ClickRegion = {}, ClickTime = 0 },
        ViewESP = { Background = self:_CreateDrawingObject("Square"), Border = self:_CreateDrawingObject("Square"), Label = self:_CreateDrawingObject("Text"), ClickRegion = {}, ClickTime = 0, IsOpen = false },
        Settings = { Icon = self:_CreateDrawingObject("Image"), ClickRegion = {}, IsOpen = false }
    }
    
    local function setupHeaderButton(button, text)
        if button.Background then button.Background.Filled = true; button.Background.zIndex = 2; button.Background.Rounding = self.ActiveTheme.Rounding.Button; end
        if button.Border then button.Border.Filled = false; button.Border.Thickness = 1; button.Border.zIndex = 3; button.Border.Rounding = self.ActiveTheme.Rounding.Button; end
        if button.Label then button.Label.Font = self.ActiveTheme.Fonts.Main; button.Label.Size = self.ActiveTheme.Fonts.Size; button.Label.Text = text; button.Label.Center = false; button.Label.Outline = false; button.Label.zIndex = 4; end
        if button.Icon then button.Icon.Size = {13.33, 13.33}; button.Icon.zIndex = 5; button.Icon.Visible = false; end
    end
    setupHeaderButton(UI.Core.HeaderButtons.Save, " Save")
    setupHeaderButton(UI.Core.HeaderButtons.ViewESP, "View ESP")
    if UI.Core.HeaderButtons.Save.Icon then UI.Core.HeaderButtons.Save.Icon.Url = "https://s6.imgcdn.dev/Y4wbgw.png"; UI.Core.HeaderButtons.Save.Icon.Visible = true; end
    if UI.Core.HeaderButtons.Settings.Icon then UI.Core.HeaderButtons.Settings.Icon.Url = "https://s6.imgcdn.dev/Y4kkRT.png"; UI.Core.HeaderButtons.Settings.Icon.Size = {20, 20}; UI.Core.HeaderButtons.Settings.Icon.zIndex = 5; end

    UI.Core.ViewESPPanel = self:_CreateDrawingObject("Square"); if UI.Core.ViewESPPanel then UI.Core.ViewESPPanel.Filled = true; UI.Core.ViewESPPanel.zIndex = 1; UI.Core.ViewESPPanel.Rounding = self.ActiveTheme.Rounding.Window; end
    UI.Core.ViewESPImage = self:_CreateDrawingObject("Image"); if UI.Core.ViewESPImage then UI.Core.ViewESPImage.zIndex = 2; UI.Core.ViewESPImage.Visible = false; UI.Core.ViewESPImage.Url = "https://s6.imgcdn.dev/Y4wqGT.jpg"; UI.Core.ViewESPImage.Rounding = self.ActiveTheme.Rounding.Window - 2; end
    UI.Core.ViewESPPanelBorder = self:_CreateDrawingObject("Square"); if UI.Core.ViewESPPanelBorder then UI.Core.ViewESPPanelBorder.Filled = false; UI.Core.ViewESPPanelBorder.Thickness = 1; UI.Core.ViewESPPanelBorder.zIndex = 3; UI.Core.ViewESPPanelBorder.Rounding = self.ActiveTheme.Rounding.Window; end

    self:_InitializeAboutWindow()

    local Players = game:FindService("Players")
    if Players and Players.localPlayer then
        local localPlayerName = Players.localPlayer.Name
        UI.Core.PlayerDisplayName.Text = localPlayerName
        if UI.Core.AboutWindow.InfoRegisteredToValue then UI.Core.AboutWindow.InfoRegisteredToValue.Text = " " .. localPlayerName end
        local userId = Players.localPlayer.UserId
        if userId and userId > 0 then 
            local avatarUrl; pcall(function() avatarUrl = self:_getAvatarThumbnail(userId) end)
            if avatarUrl then 
                UI.Core.SidebarAvatar = self:_CreateDrawingObject("Image")
                if UI.Core.SidebarAvatar then UI.Core.SidebarAvatar.Size = {56, 56}; UI.Core.SidebarAvatar.Position = {0, 0}; UI.Core.SidebarAvatar.Opacity = 1; UI.Core.SidebarAvatar.Visible = true; UI.Core.SidebarAvatar.zIndex = 4; UI.Core.SidebarAvatar.Url = avatarUrl; UI.Core.SidebarAvatar.Rounding = 28; end
            end 
        end
    end
    
    self:_ApplyTheme()
end

function Library:_InitializeAboutWindow()
    local about = {}; self.UI.Core.AboutWindow = about; local about_z = 32
    about.Background = self:_CreateDrawingObject("Square"); if about.Background then about.Background.Filled = true; about.Background.zIndex = 30; about.Background.Rounding = self.ActiveTheme.Rounding.Section; end
    about.Border = self:_CreateDrawingObject("Square"); if about.Border then about.Border.Filled = false; about.Border.Thickness = 1; about.Border.zIndex = 31; about.Border.Rounding = self.ActiveTheme.Rounding.Section; end
    about.HeaderIcon = self:_CreateDrawingObject("Image"); if about.HeaderIcon then about.HeaderIcon.Url = "https://s6.imgcdn.dev/Y4kkRT.png"; about.HeaderIcon.Size = {16, 16}; about.HeaderIcon.zIndex = about_z; end
    about.HeaderTitle = self:_CreateDrawingObject("Text"); if about.HeaderTitle then about.HeaderTitle.Font = self.ActiveTheme.Fonts.Main; about.HeaderTitle.Size = self.ActiveTheme.Fonts.Size + 2; about.HeaderTitle.Text = "About Neverlose"; about.HeaderTitle.Center = false; about.HeaderTitle.zIndex = about_z; end
    about.CloseButton = { Line1 = self:_CreateDrawingObject("Line"), Line2 = self:_CreateDrawingObject("Line"), ClickRegion = {} }; if about.CloseButton.Line1 then about.CloseButton.Line1.Thickness = 2; about.CloseButton.Line1.zIndex = about_z; end; if about.CloseButton.Line2 then about.CloseButton.Line2.Thickness = 2; about.CloseButton.Line2.zIndex = about_z; end
    
    local separatorThickness = 2
    about.Separator1 = self:_CreateDrawingObject("Line"); if about.Separator1 then about.Separator1.Thickness = separatorThickness; about.Separator1.zIndex = 31; end
    about.MainTitle = self:_CreateDrawingObject("Text"); if about.MainTitle then about.MainTitle.Font = self.ActiveTheme.Fonts.Title; about.MainTitle.Size = 24; about.MainTitle.Text = "NEVERLOSE.CC"; about.MainTitle.Center = true; about.MainTitle.zIndex = about_z; end
    about.Separator2 = self:_CreateDrawingObject("Line"); if about.Separator2 then about.Separator2.Thickness = separatorThickness; about.Separator2.zIndex = 31; end
    
    local function setupInfoText(label_text, value_text) 
        local label = self:_CreateDrawingObject("Text"); local value = self:_CreateDrawingObject("Text")
        if label then label.Font = self.ActiveTheme.Fonts.Main; label.Size = self.ActiveTheme.Fonts.Size + 2; label.Text = label_text; label.Center = false; label.zIndex = about_z; end
        if value then value.Font = self.ActiveTheme.Fonts.Main; value.Size = self.ActiveTheme.Fonts.Size + 2; value.Text = value_text; value.Center = false; value.zIndex = about_z; end
        return label, value
    end
    about.InfoVersionLabel, about.InfoVersionValue = setupInfoText("Version:", " 2.0.0")
    about.InfoBuildDateLabel, about.InfoBuildDateValue = setupInfoText("Build date:", " Dec 30 2020")
    about.InfoBuildTypeLabel, about.InfoBuildTypeValue = setupInfoText("Build type:", " Release")
    about.InfoRegisteredToLabel, about.InfoRegisteredToValue = setupInfoText("Registered to:", " " .. (game:FindService("Players").localPlayer and game:FindService("Players").localPlayer.Name or ""))
    about.InfoSubscriptionLabel, about.InfoSubscriptionValue = setupInfoText("Subscription till:", " FOREVER")
end

--================================================================
--[[ PRIVATE: THEME MANAGEMENT ]]
--================================================================

function Library:_ApplyTheme()
    self.ActiveTheme.Colors.ToggleEnabledBackground = self:_DarkenColor(self.ActiveTheme.Colors.Accent, 0.3)
    local Core = self.UI.Core

    if Core.Sidebar then Core.Sidebar.Color = self.ActiveTheme.Colors.SidebarBackground; Core.Sidebar.Opacity = self.ActiveTheme.Transparency.Sidebar; end
    if Core.RightPanel then Core.RightPanel.Color = self.ActiveTheme.Colors.MainBackground; Core.RightPanel.Opacity = self.ActiveTheme.Transparency.Main; end
    if Core.VerticalSeparator then Core.VerticalSeparator.Color = self.ActiveTheme.Colors.Separator; end
    if Core.SidebarHeaderSeparator then Core.SidebarHeaderSeparator.Color = self.ActiveTheme.Colors.Separator; end
    if Core.RightPanelHeaderSeparator then Core.RightPanelHeaderSeparator.Color = self.ActiveTheme.Colors.Separator; end
    if Core.ViewESPPanel then Core.ViewESPPanel.Color = self.ActiveTheme.Colors.MainBackground; end
    if Core.ViewESPPanelBorder then Core.ViewESPPanelBorder.Color = self.ActiveTheme.Colors.Separator; end

    local isWhiteTheme = (self.ActiveTheme == self.Themes.White)
    if Core.Title then Core.Title.Color = self.ActiveTheme.Colors.TextLight; end
    if Core.Title2 then Core.Title2.Color = self.ActiveTheme.Colors.Accent; self:_SetVisibility(Core.Title2, not isWhiteTheme); end
    if Core.Title3 then Core.Title3.Color = self.ActiveTheme.Colors.ToggleEnabledBackground; self:_SetVisibility(Core.Title3, not isWhiteTheme); end
    
    if Core.ActiveTabHighlight then Core.ActiveTabHighlight.Color = self.ActiveTheme.Colors.Accent; Core.ActiveTabHighlight.Opacity = self.ActiveTheme.Transparency.ActiveTabHighlight; end
    if Core.SidebarBottomCircle then Core.SidebarBottomCircle.Color = self.ActiveTheme.Colors.Separator; end
    if Core.PlayerDisplayName then Core.PlayerDisplayName.Color = self.ActiveTheme.Colors.TextDark; end
    if Core.TillLabel then Core.TillLabel.Color = self.ActiveTheme.Colors.TextDark; end
    if Core.ForeverLabel then Core.ForeverLabel.Color = self.ActiveTheme.Colors.Accent; end

    local saveBtn = Core.HeaderButtons.Save
    if saveBtn.Background then saveBtn.Background.Color = self.ActiveTheme.Colors.MainBackground; end
    if saveBtn.Label then saveBtn.Label.Color = self.ActiveTheme.Colors.TextDark; end
    if saveBtn.Icon then saveBtn.Icon.Color = self.ActiveTheme.Colors.TextDark; end
    local viewEspBtn = Core.HeaderButtons.ViewESP
    if viewEspBtn.Background then viewEspBtn.Background.Color = self.ActiveTheme.Colors.MainBackground; end
    if viewEspBtn.Label then viewEspBtn.Label.Color = self.ActiveTheme.Colors.TextDark; end
    if Core.HeaderButtons.Settings.Icon then Core.HeaderButtons.Settings.Icon.Color = self.ActiveTheme.Colors.TextDark; end

    for _, group in ipairs(self.UI.TabGroups) do
        if group.Header then group.Header.Color = self.ActiveTheme.Colors.TabHeader; end
    end

    for _, section in ipairs(self.UI.Sections) do
        if section.Drawing.Background then section.Drawing.Background.Color = self.ActiveTheme.Colors.SectionBackground; end
        if section.Drawing.Border then section.Drawing.Border.Color = self.ActiveTheme.Colors.Separator; end
        if section.Drawing.Title then section.Drawing.Title.Color = self.ActiveTheme.Colors.TextLight; end
        if section.Drawing.Separator then section.Drawing.Separator.Color = self.ActiveTheme.Colors.Separator; end
        for _, el in ipairs(section.Elements) do
            if el.Label then el.Label.Color = self.ActiveTheme.Colors.TextDark; end
            if el.type == "Toggle" and el.HasSettings and el.SettingsIcon then el.SettingsIcon.Color = self.ActiveTheme.Colors.TextDark; end
            if el.type == "Slider" then
                if el.LeftFill then el.LeftFill.Color = self.ActiveTheme.Colors.Accent; end
                if el.RightFill then el.RightFill.Color = self.ActiveTheme.Colors.DarkBlue; end
                if el.Nub then el.Nub.Color = self.ActiveTheme.Colors.Accent; end
                if el.ValueText then el.ValueText.Color = self.ActiveTheme.Colors.TextLight; end
            elseif el.type == "Dropdown" or el.type == "Multidropdown" then
                if el.Button then el.Button.Color = self.ActiveTheme.Colors.DarkBlue; end
                if el.ButtonText then el.ButtonText.Color = self.ActiveTheme.Colors.TextLight; end
                if el.ArrowLine1 then el.ArrowLine1.Color = self.ActiveTheme.Colors.TextLight; end
                if el.ArrowLine2 then el.ArrowLine2.Color = self.ActiveTheme.Colors.TextLight; end
                if el.OptionBackground then el.OptionBackground.Color = self.ActiveTheme.Colors.SectionBackground; end
            end
        end
    end
end

--================================================================
--[[ PRIVATE: RENDERING & INPUT HANDLING ]]
--================================================================

function Library:_RenderAboutWindow()
    local about = self.UI.Core.AboutWindow
    local isVisible = self.UI.Core.HeaderButtons.Settings.IsOpen

    local function setAboutVisibility(tbl, visible)
        for _, obj in pairs(tbl) do
            if type(obj) == 'table' then
                if obj.Visible ~= nil then self:_SetVisibility(obj, visible)
                else setAboutVisibility(obj, visible) end
            end
        end
    end
    setAboutVisibility(about, isVisible)

    if not isVisible then return end

    local winW, winH = 360, 280
    local winX, winY = self.Window.X + (self.Window.Width / 2) - (winW / 2), self.Window.Y + (self.Window.Height / 2) - (winH / 2)
    
    about.ClickRegion = {x1 = winX, y1 = winY, x2 = winX + winW, y2 = winY + winH}
    about.Background.Position = {winX, winY}; about.Background.Size = {winW, winH}
    about.Border.Position = {winX, winY}; about.Border.Size = {winW, winH}
    
    about.HeaderIcon.Position = {winX + 15, winY + 12}
    about.HeaderTitle.Position = {winX + 15 + about.HeaderIcon.Size.x + 8, winY + 13}
    about.CloseButton.Line1.From = {winX + winW - 25, winY + 12}; about.CloseButton.Line1.To = {winX + winW - 15, winY + 22}
    about.CloseButton.Line2.From = {winX + winW - 25, winY + 22}; about.CloseButton.Line2.To = {winX + winW - 15, winY + 12}
    about.CloseButton.ClickRegion = {x1 = winX + winW - 30, y1 = winY + 10, x2 = winX + winW - 10, y2 = winY + 25}

    local currentY = winY + 40
    about.Separator1.From = {winX + 10, currentY}; about.Separator1.To = {winX + winW - 10, currentY}
    
    currentY = currentY + 25
    about.MainTitle.Position = {winX + winW / 2, currentY}
    currentY = currentY + 40
    about.Separator2.From = {winX + 10, currentY}; about.Separator2.To = {winX + winW - 10, currentY}

    currentY = currentY + 20
    local infoX = winX + 30
    local function renderInfoLine(y, label, value)
        if label and value then
            label.Position = {infoX, y}
            if label.TextBounds then value.Position = {infoX + label.TextBounds.x + 5, y} end
            return y + 25
        end
        return y
    end

    currentY = renderInfoLine(currentY, about.InfoVersionLabel, about.InfoVersionValue)
    currentY = renderInfoLine(currentY, about.InfoBuildDateLabel, about.InfoBuildDateValue)
    currentY = renderInfoLine(currentY, about.InfoBuildTypeLabel, about.InfoBuildTypeValue)
    currentY = renderInfoLine(currentY, about.InfoRegisteredToLabel, about.InfoRegisteredToValue)
    currentY = renderInfoLine(currentY, about.InfoSubscriptionLabel, about.InfoSubscriptionValue)
end

function Library:_RenderLoop()
    if not self.Window.Visible then return end

    local Core = self.UI.Core
    local windowX, windowY = self:_SafeNumber(self.Window.X, 0), self:_SafeNumber(self.Window.Y, 0)
    local sidebarWidth, headerHeight = self:_SafeNumber(self.Window.SidebarWidth, 0), self:_SafeNumber(self.Window.HeaderHeight, 0)
    local rightPanelX = windowX + sidebarWidth - self.Window.PanelOverlap

    self:_SetVisibility(Core.Sidebar, true); self:_SetVisibility(Core.RightPanel, true); self:_SetVisibility(Core.VerticalSeparator, true); self:_SetVisibility(Core.SidebarHeaderSeparator, true); self:_SetVisibility(Core.RightPanelHeaderSeparator, true); self:_SetVisibility(Core.Title, true); self:_SetVisibility(Core.SidebarBottomCircle, true); if Core.SidebarAvatar then self:_SetVisibility(Core.SidebarAvatar, true) end; self:_SetVisibility(Core.PlayerDisplayName, true); self:_SetVisibility(Core.TillLabel, true); self:_SetVisibility(Core.ForeverLabel, true)
    self:_SetVisibility(Core.Title2, not (self.ActiveTheme == self.Themes.White)); self:_SetVisibility(Core.Title3, not (self.ActiveTheme == self.Themes.White))
    
    if Core.Sidebar then Core.Sidebar.Position = {windowX, windowY}; Core.Sidebar.Size = {sidebarWidth, self.Window.Height}; end
    if Core.RightPanel then Core.RightPanel.Position = {rightPanelX, windowY}; Core.RightPanel.Size = {self.Window.Width - sidebarWidth + self.Window.PanelOverlap, self.Window.Height}; end
    if Core.VerticalSeparator then Core.VerticalSeparator.Position = {rightPanelX, windowY}; Core.VerticalSeparator.Size = {4, self.Window.Height}; end
    if Core.SidebarHeaderSeparator then Core.SidebarHeaderSeparator.Position = {windowX, windowY + self.Window.Height - 100 + 14}; Core.SidebarHeaderSeparator.Size = {sidebarWidth, 4}; Core.SidebarHeaderSeparator.Opacity = self.ActiveTheme.Transparency.Solid; end
    if Core.RightPanelHeaderSeparator then Core.RightPanelHeaderSeparator.Position = {rightPanelX, windowY + headerHeight}; Core.RightPanelHeaderSeparator.Size = {self.Window.Width - sidebarWidth + self.Window.PanelOverlap, 4}; end
    if Core.Title then Core.Title.Position = {windowX + 11, windowY + 25}; end
    if Core.Title2 then Core.Title2.Position = {windowX + 9, windowY + 26}; end
    if Core.Title3 then Core.Title3.Position = {windowX + 7, windowY + 24}; end
    if Core.SidebarBottomCircle then local circleX = windowX + 8 + Core.SidebarBottomCircle.Radius; local circleY = windowY + self.Window.Height - 44; Core.SidebarBottomCircle.Position = {circleX, circleY}; end
    if Core.SidebarAvatar then local avatarSize = 56; local avatarX = windowX + 8; local avatarY = windowY + self.Window.Height - 44 - avatarSize / 2; Core.SidebarAvatar.Position = {avatarX, avatarY}; Core.SidebarAvatar.Size = {avatarSize, avatarSize}; end
    if Core.PlayerDisplayName then local textX = windowX + 15 + Core.SidebarBottomCircle.Radius * 2 + 5; local textY = windowY + self.Window.Height - 56; Core.PlayerDisplayName.Position = {textX, textY}; end
    if Core.TillLabel then local textX = windowX + 15 + Core.SidebarBottomCircle.Radius * 2 + 5; local textY = windowY + self.Window.Height - 40; Core.TillLabel.Position = {textX, textY}; end
    if Core.ForeverLabel then local textX = windowX + 8 + Core.SidebarBottomCircle.Radius * 2 + 30; local textY = windowY + self.Window.Height - 40; Core.ForeverLabel.Position = {textX, textY}; end
    
    do
        local startX, startY = rightPanelX + 35, windowY + (headerHeight / 2)
        local function renderHeaderButton(button, x, y, width, height, isSaveButton)
             self:_SetVisibility(button.Background, true); self:_SetVisibility(button.Border, true); self:_SetVisibility(button.Label, true); if button.Icon then self:_SetVisibility(button.Icon, button.Icon.Visible) end
             button.Background.Position = {x, y}; button.Background.Size = {width, height}; button.Border.Position = {x, y}; button.Border.Size = {width, height}; button.Border.Color = (tick() - button.ClickTime < 0.1 or (button.IsOpen)) and self.ActiveTheme.Colors.Accent or self.ActiveTheme.Colors.Separator
             if isSaveButton and button.Icon then local iconX, iconY = x + 12, y + (height / 2) - (button.Icon.Size.y / 2); button.Icon.Position = {iconX, iconY}; local labelX, labelY = iconX + button.Icon.Size.x + 5, y + (height / 2) - (button.Label.Size / 2); button.Label.Position = {labelX, labelY}; button.Label.Center = false else button.Label.Position = {x + width / 2, y + (height / 2) - (button.Label.Size / 2)}; button.Label.Center = true end
             button.ClickRegion = {x1 = x, y1 = y, x2 = x + width, y2 = y + height}
        end
        local btnWidth, btnHeight, spacing = 75, 30, 15; local btnY = startY - (btnHeight / 2)
        renderHeaderButton(Core.HeaderButtons.Save, startX, btnY, btnWidth, btnHeight, true)
        renderHeaderButton(Core.HeaderButtons.ViewESP, startX + btnWidth + spacing, btnY, btnWidth, btnHeight, false)
        local settingsIcon = Core.HeaderButtons.Settings.Icon; local settingsX = rightPanelX + (self.Window.Width - sidebarWidth + self.Window.PanelOverlap) - settingsIcon.Size.x - 20 - 30; local settingsY = startY - (settingsIcon.Size.y / 2)
        self:_SetVisibility(settingsIcon, true); settingsIcon.Position = {settingsX, settingsY}; Core.HeaderButtons.Settings.ClickRegion = {x1 = settingsX, y1 = settingsY, x2 = settingsX + settingsIcon.Size.x, y2 = settingsY + settingsIcon.Size.y}
    end
    
    self:_SetVisibility(Core.ViewESPPanel, Core.HeaderButtons.ViewESP.IsOpen); self:_SetVisibility(Core.ViewESPPanelBorder, Core.HeaderButtons.ViewESP.IsOpen)
    if Core.HeaderButtons.ViewESP.IsOpen then local panelX = windowX + self.Window.Width + 11; Core.ViewESPPanel.Position = {panelX, windowY}; Core.ViewESPPanel.Size = {200, 310}; Core.ViewESPPanelBorder.Position = {panelX, windowY}; Core.ViewESPPanelBorder.Size = {200, 310}; if Core.ViewESPImage then self:_SetVisibility(Core.ViewESPImage, true); local imageX, imageY = panelX + 3, windowY + 3; Core.ViewESPImage.Position = {imageX, imageY}; Core.ViewESPImage.Size = {194, 304}; end
    elseif Core.ViewESPImage then self:_SetVisibility(Core.ViewESPImage, false) end

    self:_RenderTabs(windowX, windowY + headerHeight, sidebarWidth)
    self:_RenderSections(rightPanelX, windowY, headerHeight)
    self:_RenderAboutWindow()
end

function Library:_RenderTabs(x, y, width)
    local currentY = y + 25
    local highlightY = 0
    for _, group in ipairs(self.UI.TabGroups) do
        if group.Header then group.Header.Position = {x + 25, currentY}; self:_SetVisibility(group.Header, true); end
        currentY = currentY + self.ActiveTheme.Fonts.TabHeaderSize + 10
        for _, tab in ipairs(group.Tabs) do
            local tabHeight = self.ActiveTheme.Fonts.TabSize + 10
            local is_active = (self.Window.ActiveTab == tab.Name)
            local text_color = is_active and self.ActiveTheme.Colors.TextLight or self.ActiveTheme.Colors.TextDark
            local startX = x + 25
            
            if tab.Icon then 
                self:_SetVisibility(tab.Icon, true)
                tab.Icon.Position = {startX, currentY + (tabHeight / 2) - (self.ActiveTheme.IconSize / 2)}
                tab.Icon.Color = text_color
                startX = startX + self.ActiveTheme.IconSize + 8
            end

            if tab.Text then self:_SetVisibility(tab.Text, true); tab.Text.Position = {startX, currentY + (tabHeight / 2) - (tab.Text.Size / 2)}; tab.Text.Color = text_color; end

            tab.ClickRegion = {x1 = x + 10, y1 = currentY, x2 = x + width - 10, y2 = currentY + tabHeight}
            if is_active then highlightY = currentY; end
            currentY = currentY + tabHeight + 5
        end
        currentY = currentY + 15
    end
    if highlightY > 0 and self.UI.Core.ActiveTabHighlight then
        self.UI.Core.ActiveTabHighlight.Position = {x + 10, highlightY}; self.UI.Core.ActiveTabHighlight.Size = {self.Window.SidebarWidth - 20, self.ActiveTheme.Fonts.TabSize + 10};
        self:_SetVisibility(self.UI.Core.ActiveTabHighlight, true)
    else
        self:_SetVisibility(self.UI.Core.ActiveTabHighlight, false)
    end
end

function Library:_RenderSections(panelX, panelY, headerHeight)
    local leftColumnY = panelY + headerHeight + 20
    local rightColumnY = panelY + headerHeight + 20
    local columnSpacing = 20
    local columnWidth = ((self.Window.Width - self.Window.SidebarWidth + self.Window.PanelOverlap) - (columnSpacing * 3)) / 2
    local leftColumnX = panelX + columnSpacing
    local rightColumnX = leftColumnX + columnWidth + columnSpacing

    for _, section in ipairs(self.UI.Sections) do
        local isVisible = section.ParentTab == self.Window.ActiveTab
        for _, obj in pairs(section.Drawing) do self:_SetVisibility(obj, isVisible) end
        
        if isVisible then
            local sectionX, sectionY
            if section.Side == "Left" then sectionX, sectionY = leftColumnX, leftColumnY else sectionX, sectionY = rightColumnX, rightColumnY end
            
            local sDrawing = section.Drawing
            sDrawing.Background.Position = {sectionX, sectionY}; 
            sDrawing.Border.Position = {sectionX, sectionY}; 
            sDrawing.Title.Position = {sectionX + 10, sectionY + 8}; 
            local separatorY = sDrawing.Title.Position.y + sDrawing.Title.Size + 5
            sDrawing.Separator.From = {sectionX + 10, separatorY}; sDrawing.Separator.To = {sectionX + columnWidth - 10, separatorY};

            local elementY = separatorY + 15
            for _, el in ipairs(section.Elements) do
                self:_SetVisibility(el.Label, true); if el.Back then self:_SetVisibility(el.Back, true) end; if el.Nub then self:_SetVisibility(el.Nub, true) end
                
                if el.type == "Toggle" then
                    el.Label.Position = {sectionX + 10, elementY}; 
                    local toggleBackX = sectionX + columnWidth - el.Size.width - 15
                    el.Back.Position = {toggleBackX, elementY + 2}; el.Back.Size = {el.Size.width, el.Size.height}; el.ClickRegion = {x1 = toggleBackX, y1 = elementY, x2 = toggleBackX + el.Size.width, y2 = elementY + el.Size.height + 4}
                    if self.UI.Values[el.id] then 
                        el.Back.Color = self.ActiveTheme.Colors.ToggleEnabledBackground
                        el.Nub.Color = self.ActiveTheme.Colors.Accent
                        el.Nub.Position = {toggleBackX + el.Size.width - 5, elementY + 2 + el.Size.height/2} 
                    else 
                        el.Back.Color = self.ActiveTheme.Colors.DarkGray
                        el.Nub.Color = self.ActiveTheme.Colors.LightGray
                        el.Nub.Position = {toggleBackX + 5, elementY + 2 + el.Size.height/2} 
                    end
                    elementY = elementY + 35
                end
            end
            local sectionHeight = elementY - sectionY
            sDrawing.Background.Size = {columnWidth, sectionHeight}; sDrawing.Border.Size = {columnWidth, sectionHeight}
            if section.Side == "Left" then leftColumnY = elementY + columnSpacing else rightColumnY = elementY + columnSpacing end
        else
            for _, el in ipairs(section.Elements) do for _, obj in pairs(el) do if type(obj) == 'table' and obj.Visible ~= nil then self:_SetVisibility(obj, false) end end end
        end
    end
end

function Library:_InputLoop()
    local mouse_pos = getmouseposition()
    if not mouse_pos then return end
    
    local mouse_x, mouse_y = self:_SafeNumber(mouse_pos.x, 0), self:_SafeNumber(mouse_pos.y, 0)
    local is_left_pressed_now = isleftpressed()
    local is_left_clicked = was_left_pressed and not is_left_pressed_now

    if is_left_pressed_now and not was_left_pressed then
        local header_drag_region = {x1 = self.Window.X, y1 = self.Window.Y, x2 = self.Window.X + self.Window.Width, y2 = self.Window.Y + self.Window.HeaderHeight}
        local on_header_button = self:_IsPointInRegion(mouse_x, mouse_y, self.UI.Core.HeaderButtons.Save.ClickRegion) or self:_IsPointInRegion(mouse_x, mouse_y, self.UI.Core.HeaderButtons.ViewESP.ClickRegion) or self:_IsPointInRegion(mouse_x, mouse_y, self.UI.Core.HeaderButtons.Settings.ClickRegion)
        
        if self:_IsPointInRegion(mouse_x, mouse_y, header_drag_region) and not on_header_button then
            self.Window.IsDragging = true
            drag_offset = {x = mouse_x - self.Window.X, y = mouse_y - self.Window.Y}
        end
    end

    if not is_left_pressed_now then self.Window.IsDragging = false end
    if self.Window.IsDragging then self.Window.X = mouse_x - drag_offset.x; self.Window.Y = mouse_y - drag_offset.y; end

    if is_left_clicked then
        if self.UI.Core.HeaderButtons.Settings.IsOpen and self:_IsPointInRegion(mouse_x, mouse_y, self.UI.Core.AboutWindow.CloseButton.ClickRegion) then
            self.UI.Core.HeaderButtons.Settings.IsOpen = false
            was_left_pressed = is_left_pressed_now; return
        end

        if self:_IsPointInRegion(mouse_x, mouse_y, self.UI.Core.HeaderButtons.Save.ClickRegion) then print(SCRIPT_PREFIX.."Save clicked!"); self.UI.Core.HeaderButtons.Save.ClickTime = tick() end
        if self:_IsPointInRegion(mouse_x, mouse_y, self.UI.Core.HeaderButtons.ViewESP.ClickRegion) then self.UI.Core.HeaderButtons.ViewESP.IsOpen = not self.UI.Core.HeaderButtons.ViewESP.IsOpen; self.UI.Core.HeaderButtons.ViewESP.ClickTime = tick() end
        if self:_IsPointInRegion(mouse_x, mouse_y, self.UI.Core.HeaderButtons.Settings.ClickRegion) then self.UI.Core.HeaderButtons.Settings.IsOpen = not self.UI.Core.HeaderButtons.Settings.IsOpen end

        for _, group in ipairs(self.UI.TabGroups) do
            for _, tab in ipairs(group.Tabs) do
                if self:_IsPointInRegion(mouse_x, mouse_y, tab.ClickRegion) then self.Window.ActiveTab = tab.Name end
            end
        end

        for _, section in ipairs(self.UI.Sections) do
            if section.ParentTab == self.Window.ActiveTab then
                for _, el in ipairs(section.Elements) do
                    if self:_IsPointInRegion(mouse_x, mouse_y, el.ClickRegion) then
                        if el.type == "Toggle" then
                            self.UI.Values[el.id] = not self.UI.Values[el.id]
                            if el.Callback then el.Callback(self.UI.Values[el.id]) end
                        end
                    end
                end
            end
        end
    end

    was_left_pressed = is_left_pressed_now
end

function Library:_MainLoop()
    print(SCRIPT_PREFIX .. "UI Initialized and Main Loop started.")
    while self.Window.Visible do
        pcall(function() self:_InputLoop(); self:_RenderLoop() end)
        wait(0.01)
    end
end

--================================================================
--[[ PUBLIC API ]]
--================================================================

function Library:Tab(options)
    local tabGroupName = options.Group
    local tabName = options.Name
    
    local existingGroup; for _, group in ipairs(self.UI.TabGroups) do if group.Name == tabGroupName then existingGroup = group; break end end

    if not existingGroup then
        existingGroup = { Name = tabGroupName, Header = self:_CreateDrawingObject("Text"), Tabs = {} }
        if existingGroup.Header then existingGroup.Header.Font = self.ActiveTheme.Fonts.Main; existingGroup.Header.Size = self.ActiveTheme.Fonts.TabHeaderSize; existingGroup.Header.Text = existingGroup.Name; existingGroup.Header.Center = false; existingGroup.Header.Outline = false; existingGroup.Header.zIndex = 3; end
        table.insert(self.UI.TabGroups, existingGroup)
    end
    
    local tab_obj = { Name = tabName, Text = self:_CreateDrawingObject("Text"), Icon = nil, ClickRegion = {} }
    if tab_obj.Text then tab_obj.Text.Font = self.ActiveTheme.Fonts.Main; tab_obj.Text.Size = self.ActiveTheme.Fonts.TabSize; tab_obj.Text.Text = tabName; tab_obj.Text.Center = false; tab_obj.Text.Outline = false; tab_obj.Text.zIndex = 3; end
    if options.Icon then tab_obj.Icon = self:_CreateDrawingObject("Image"); if tab_obj.Icon then tab_obj.Icon.Url = options.Icon; tab_obj.Icon.Size = {self.ActiveTheme.IconSize, self.ActiveTheme.IconSize}; tab_obj.Icon.zIndex = 3; end end
    
    if self.Window.ActiveTab == "" then self.Window.ActiveTab = tabName end
    table.insert(existingGroup.Tabs, tab_obj)

    local TabObject = {}; function TabObject:Section(sectionOptions) sectionOptions.ParentTab = tabName; return self:Section(sectionOptions) end
    return TabObject
end

function Library:Section(options)
    local section = {
        Title = options.Name, ParentTab = options.ParentTab, Side = options.Side or "Left", Elements = {},
        Drawing = { Background = self:_CreateDrawingObject("Square"), Border = self:_CreateDrawingObject("Square"), Title = self:_CreateDrawingObject("Text"), Separator = self:_CreateDrawingObject("Line") }
    }
    if section.Drawing.Background then section.Drawing.Background.Filled = true; section.Drawing.Background.zIndex = 2; section.Drawing.Background.Rounding = self.ActiveTheme.Rounding.Section; end
    if section.Drawing.Border then section.Drawing.Border.Filled = false; section.Drawing.Border.Thickness = 1; section.Drawing.Border.zIndex = 3; section.Drawing.Border.Rounding = self.ActiveTheme.Rounding.Section; end
    if section.Drawing.Title then section.Drawing.Title.Font = self.ActiveTheme.Fonts.Main; section.Drawing.Title.Size = self.ActiveTheme.Fonts.Size + 10; section.Drawing.Title.Text = section.Title; section.Drawing.Title.Center = false; section.Drawing.Title.Outline = false; section.Drawing.Title.zIndex = 4; end
    if section.Drawing.Separator then section.Drawing.Separator.Thickness = 2; section.Drawing.Separator.zIndex = 3; end
    
    table.insert(self.UI.Sections, section)
    
    local SectionObject = {}
    function SectionObject:Toggle(toggleOptions)
        self.UI.Values[toggleOptions.id] = toggleOptions.Default or false
        local toggle = { id = toggleOptions.id, type = "Toggle", Name = toggleOptions.Name, Size = {width = 35, height = 12}, Callback = toggleOptions.Callback, Label = self:_CreateDrawingObject("Text"), Back = self:_CreateDrawingObject("Square"), Nub = self:_CreateDrawingObject("Circle"), ClickRegion = {} }
        if toggle.Label then toggle.Label.Font = self.ActiveTheme.Fonts.Main; toggle.Label.Size = self.ActiveTheme.Fonts.Size + 2; toggle.Label.Text = toggle.Name; toggle.Label.Center = false; toggle.Label.Outline = false; toggle.Label.zIndex = 4; end
        if toggle.Back then toggle.Back.Filled = true; toggle.Back.zIndex = 4; toggle.Back.Rounding = 6; end
        if toggle.Nub then toggle.Nub.Filled = true; toggle.Nub.zIndex = 5; toggle.Nub.Radius = 9; end
        table.insert(section.Elements, toggle)
        return SectionObject
    end
    
    return SectionObject
end

function Library:Unload()
    self.Window.Visible = false
    for _, obj in ipairs(self.UI.DrawingObjects) do if obj and obj.Remove then pcall(obj.Remove, obj) end end
    self.UI.DrawingObjects = {}; print(SCRIPT_PREFIX .. "UI Unloaded.")
end

function Library:Create()
    self:_InitializeCoreUI()
    spawn(function() self:_MainLoop() end)
    local PublicUIObject = {}; function PublicUIObject:Tab(tabOptions) return self:Tab(tabOptions) end
    return PublicUIObject
end

return Library
