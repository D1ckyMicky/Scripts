--[[
    Neverlose.cc Style UI Library for Severe
    Version: 10.0 (Architecture Refactor)
    
    This script has been refactored into a library structure.
    All rendering and input handling logic is encapsulated within the Library object.
    It provides a simple API for users to create UI elements without needing to understand the core rendering logic.
]]

local Library = {}

--================================================================
--[[ PRIVATE: CORE PROPERTIES & CONFIGURATION ]]
--================================================================

Library.Window = {
    Visible = true,
    X = 400,
    Y = 200,
    Width = 750,
    Height = 620,
    SidebarWidth = 187,
    HeaderHeight = 65,
    IsDragging = false,
    ActiveTab = "", -- Will be set by the first created tab
    PanelOverlap = 4
}

Library.Themes = {
    Blue = {
        Fonts = { Title = 2, Main = 1, Size = 14, TitleSize = 27, TabSize = 18, TabHeaderSize = 12 },
        Colors = { MainBackground = {6, 9, 17}, SectionBackground = {3, 11, 23}, SidebarBackground = {11, 20, 33}, Separator = {0, 18, 32}, Accent = {24, 165, 232}, DarkBlue = {3, 23, 51}, DarkGray = {24, 24, 24}, LightGray = {77, 77, 76}, TextDark = {160, 181, 197}, TextLight = {234, 239, 245}, TabHeader = {100, 120, 140}, White = {255, 255, 255}, Black = {0, 0, 0} },
        Transparency = { Solid = 0.9, ActiveTabHighlight = 0.28, Main = 0.96, Sidebar = 0.8 },
        Rounding = { Window = 8, Section = 6, Element = 4, Button = 5 },
        IconSize = 16
    },
    Black = {
        Fonts = { Title = 2, Main = 1, Size = 14, TitleSize = 27, TabSize = 18, TabHeaderSize = 12 },
        Colors = { MainBackground = {6, 6, 9}, SectionBackground = {0, 3, 5}, SidebarBackground = {14, 16, 19}, Separator = {11, 11, 11}, Accent = {72, 130, 255}, DarkBlue = {10, 11, 19}, DarkGray = {24, 24, 24}, LightGray = {77, 77, 76}, TextDark = {181, 181, 194}, TextLight = {234, 239, 245}, TabHeader = {111, 120, 130}, White = {255, 255, 255}, Black = {0, 0, 0} },
        Transparency = { Solid = 0.9, ActiveTabHighlight = 0.28, Main = 0.967, Sidebar = 0.9 },
        Rounding = { Window = 8, Section = 6, Element = 4, Button = 5 },
        IconSize = 16
    },
    White = {
        Fonts = { Title = 2, Main = 1, Size = 14, TitleSize = 27, TabSize = 18, TabHeaderSize = 12 },
        Colors = { MainBackground = {250, 250, 255}, SectionBackground = {244, 244, 244}, SidebarBackground = {240, 240, 240}, Separator = {200, 200, 200}, Accent = {24, 165, 232}, DarkBlue = {220, 220, 220}, DarkGray = {165, 165, 165}, LightGray = {120, 120, 120}, TextDark = {60, 60, 60}, TextLight = {10, 10, 10}, TabHeader = {100, 100, 100}, White = {255, 255, 255}, Black = {0, 0, 0} },
        Transparency = { Solid = 0.9, ActiveTabHighlight = 0.28, Main = 0.967, Sidebar = 0.9 },
        Rounding = { Window = 8, Section = 6, Element = 4, Button = 5 },
        IconSize = 16
    }
}
Library.ActiveTheme = Library.Themes.Blue -- Default Theme

-- Internal state
Library.UI = {
    Tabs = {}, -- Holds tab configurations
    Sections = {}, -- Holds section configurations
    Values = {}, -- Holds the state of all UI elements (toggles, sliders, etc.)
    DrawingObjects = {}, -- Holds all created drawing objects for easy removal
    Popups = {} -- For managing popups like keybind settings
}

-- Private state variables
local drag_offset = {x = 0, y = 0}
local was_left_pressed = false
local is_dragging_something = false
local SCRIPT_PREFIX = "[NL UI Lib] "

--================================================================
--[[ PRIVATE: HELPER FUNCTIONS ]]
--================================================================

-- Wrapper to create a drawing object and store it for later cleanup
function Library:_CreateDrawingObject(class)
    local success, object = pcall(Drawing.new, class)
    if not success then
        warn(SCRIPT_PREFIX .. "Failed to create Drawing object of type:", class)
        return nil
    end
    table.insert(self.UI.DrawingObjects, object)
    return object
end

function Library:_DarkenColor(color, factor)
    factor = factor or 0.3
    return {
        math.max(0, math.floor(color[1] * factor)),
        math.max(0, math.floor(color[2] * factor)),
        math.max(0, math.floor(color[3] * factor))
    }
end

function Library:_SafeNumber(value, default)
    return type(value) == "number" and value or (default or 0)
end

function Library:_IsPointInRegion(x, y, region)
    if not region or not region.x1 or not region.x2 or not region.y1 or not region.y2 then return false end
    return x >= self:_SafeNumber(region.x1, 0) and x <= self:_SafeNumber(region.x2, 0) and y >= self:_SafeNumber(region.y1, 0) and y <= self:_SafeNumber(region.y2, 0)
end

function Library:_SetVisibility(object, visible)
    if object and object.Visible ~= visible then
        object.Visible = visible
    end
end

function Library:_getAvatarThumbnail(userId)
    local url = string.format("https://thumbnails.roblox.com/v1/users/avatar-headshot?userIds=%d&size=420x420&format=Png&isCircular=true", userId)
    local success, response = pcall(function() return httpget(url, "application/json") end)
    if success then
        local decoded = JSONDecode(response)
        if decoded and decoded.data and decoded.data[1] and decoded.data[1].imageUrl then
            return decoded.data[1].imageUrl
        end
    end
    return nil
end

--================================================================
--[[ PRIVATE: INITIALIZATION & CORE UI ]]
--================================================================

-- Initializes all static drawing objects for the main window and core components
function Library:_InitializeCoreUI()
    local UI = self.UI
    UI.Core = {} -- Container for core, non-dynamic UI elements
    
    -- Main Window Panels
    UI.Core.Sidebar = self:_CreateDrawingObject("Square"); if UI.Core.Sidebar then UI.Core.Sidebar.Filled = true; UI.Core.Sidebar.zIndex = 1; UI.Core.Sidebar.Rounding = self.ActiveTheme.Rounding.Window; end
    UI.Core.RightPanel = self:_CreateDrawingObject("Square"); if UI.Core.RightPanel then UI.Core.RightPanel.Filled = true; UI.Core.RightPanel.zIndex = 1; UI.Core.RightPanel.Rounding = self.ActiveTheme.Rounding.Window; end
    UI.Core.VerticalSeparator = self:_CreateDrawingObject("Square"); if UI.Core.VerticalSeparator then UI.Core.VerticalSeparator.Filled = true; UI.Core.VerticalSeparator.zIndex = 3; end
    UI.Core.SidebarHeaderSeparator = self:_CreateDrawingObject("Square"); if UI.Core.SidebarHeaderSeparator then UI.Core.SidebarHeaderSeparator.Filled = true; UI.Core.SidebarHeaderSeparator.zIndex = 2; end
    UI.Core.RightPanelHeaderSeparator = self:_CreateDrawingObject("Square"); if UI.Core.RightPanelHeaderSeparator then UI.Core.RightPanelHeaderSeparator.Filled = true; UI.Core.RightPanelHeaderSeparator.zIndex = 2; end
    
    -- Titles
    UI.Core.Title = self:_CreateDrawingObject("Text"); if UI.Core.Title then UI.Core.Title.Font = self.ActiveTheme.Fonts.Title; UI.Core.Title.Size = self.ActiveTheme.Fonts.TitleSize; UI.Core.Title.Text = "NEVERLOSE"; UI.Core.Title.Center = false; UI.Core.Title.Outline = false; UI.Core.Title.zIndex = 5; end
    UI.Core.Title2 = self:_CreateDrawingObject("Text"); if UI.Core.Title2 then UI.Core.Title2.Font = self.ActiveTheme.Fonts.Title; UI.Core.Title2.Size = self.ActiveTheme.Fonts.TitleSize; UI.Core.Title2.Text = "NEVERLOSE"; UI.Core.Title2.Center = false; UI.Core.Title2.Outline = false; UI.Core.Title2.zIndex = 4; end
    UI.Core.Title3 = self:_CreateDrawingObject("Text"); if UI.Core.Title3 then UI.Core.Title3.Font = self.ActiveTheme.Fonts.Title; UI.Core.Title3.Size = self.ActiveTheme.Fonts.TitleSize; UI.Core.Title3.Text = "NEVERLOSE"; UI.Core.Title3.Center = false; UI.Core.Title3.Outline = false; UI.Core.Title3.zIndex = 3; end
    
    -- Active Tab Highlight
    UI.Core.ActiveTabHighlight = self:_CreateDrawingObject("Square"); if UI.Core.ActiveTabHighlight then UI.Core.ActiveTabHighlight.Filled = true; UI.Core.ActiveTabHighlight.zIndex = 2; UI.Core.ActiveTabHighlight.Rounding = self.ActiveTheme.Rounding.Element + 3; end

    -- Sidebar Bottom (Player Info)
    UI.Core.SidebarBottomCircle = self:_CreateDrawingObject("Circle"); if UI.Core.SidebarBottomCircle then UI.Core.SidebarBottomCircle.Filled = false; UI.Core.SidebarBottomCircle.Thickness = 3; UI.Core.SidebarBottomCircle.zIndex = 6; UI.Core.SidebarBottomCircle.Radius = 28; end
    UI.Core.PlayerDisplayName = self:_CreateDrawingObject("Text"); if UI.Core.PlayerDisplayName then UI.Core.PlayerDisplayName.Font = self.ActiveTheme.Fonts.Main; UI.Core.PlayerDisplayName.Size = self.ActiveTheme.Fonts.Size + 2; UI.Core.PlayerDisplayName.Text = ""; UI.Core.PlayerDisplayName.Center = false; UI.Core.PlayerDisplayName.Outline = false; UI.Core.PlayerDisplayName.zIndex = 7; end
    UI.Core.TillLabel = self:_CreateDrawingObject("Text"); if UI.Core.TillLabel then UI.Core.TillLabel.Font = self.ActiveTheme.Fonts.Main; UI.Core.TillLabel.Size = self.ActiveTheme.Fonts.Size; UI.Core.TillLabel.Text = "Till:"; UI.Core.TillLabel.Center = false; UI.Core.TillLabel.Outline = false; UI.Core.TillLabel.zIndex = 7; end
    UI.Core.ForeverLabel = self:_CreateDrawingObject("Text"); if UI.Core.ForeverLabel then UI.Core.ForeverLabel.Font = self.ActiveTheme.Fonts.Main; UI.Core.ForeverLabel.Size = self.ActiveTheme.Fonts.Size; UI.Core.ForeverLabel.Text = " Forever"; UI.Core.ForeverLabel.Center = false; UI.Core.ForeverLabel.Outline = false; UI.Core.ForeverLabel.zIndex = 7; end
    
    -- Header Buttons (Save, View ESP, Settings)
    UI.Core.HeaderButtons = {
        Save = { Background = self:_CreateDrawingObject("Square"), Border = self:_CreateDrawingObject("Square"), Label = self:_CreateDrawingObject("Text"), Icon = self:_CreateDrawingObject("Image"), ClickRegion = {}, ClickTime = 0 },
        ViewESP = { Background = self:_CreateDrawingObject("Square"), Border = self:_CreateDrawingObject("Square"), Label = self:_CreateDrawingObject("Text"), ClickRegion = {}, ClickTime = 0, IsOpen = false },
        Settings = { Icon = self:_CreateDrawingObject("Image"), ClickRegion = {} }
    }
    
    local function setupHeaderButton(button, text)
        if button.Background then button.Background.Filled = true; button.Background.zIndex = 2; button.Background.Rounding = self.ActiveTheme.Rounding.Button; end
        if button.Border then button.Border.Filled = false; button.Border.Thickness = 1; button.Border.zIndex = 3; button.Border.Rounding = self.ActiveTheme.Rounding.Button; end
        if button.Label then button.Label.Font = self.ActiveTheme.Fonts.Main; button.Label.Size = self.ActiveTheme.Fonts.Size; button.Label.Text = text; button.Label.Center = false; button.Label.Outline = false; button.Label.zIndex = 4; end
        if button.Icon then button.Icon.Size = {13.33, 13.33}; button.Icon.zIndex = 5; button.Icon.Visible = false; end
    end
    setupHeaderButton(UI.Core.HeaderButtons.Save, " Save")
    setupHeaderButton(UI.Core.HeaderButtons.ViewESP, "View ESP")
    if UI.Core.HeaderButtons.Save.Icon then UI.Core.HeaderButtons.Save.Icon.Url = "https://s6.imgcdn.dev/Y4wbgw.png"; UI.Core.HeaderButtons.Save.Icon.Visible = true; end
    if UI.Core.HeaderButtons.Settings.Icon then UI.Core.HeaderButtons.Settings.Icon.Url = "https://s6.imgcdn.dev/Y4kkRT.png"; UI.Core.HeaderButtons.Settings.Icon.Size = {20, 20}; UI.Core.HeaderButtons.Settings.Icon.zIndex = 5; end

    -- View ESP Panel
    UI.Core.ViewESPPanel = self:_CreateDrawingObject("Square"); if UI.Core.ViewESPPanel then UI.Core.ViewESPPanel.Filled = true; UI.Core.ViewESPPanel.zIndex = 1; UI.Core.ViewESPPanel.Rounding = self.ActiveTheme.Rounding.Window; end
    UI.Core.ViewESPImage = self:_CreateDrawingObject("Image"); if UI.Core.ViewESPImage then UI.Core.ViewESPImage.zIndex = 2; UI.Core.ViewESPImage.Visible = false; UI.Core.ViewESPImage.Url = "https://s6.imgcdn.dev/Y4wqGT.jpg"; UI.Core.ViewESPImage.Rounding = self.ActiveTheme.Rounding.Window - 2; end
    UI.Core.ViewESPPanelBorder = self:_CreateDrawingObject("Square"); if UI.Core.ViewESPPanelBorder then UI.Core.ViewESPPanelBorder.Filled = false; UI.Core.ViewESPPanelBorder.Thickness = 1; UI.Core.ViewESPPanelBorder.zIndex = 3; UI.Core.ViewESPPanelBorder.Rounding = self.ActiveTheme.Rounding.Window; end

    -- About Window
    self:_InitializeAboutWindow()

    -- Set Player Info
    local Players = game:FindService("Players")
    if Players and Players.localPlayer then
        local localPlayerName = Players.localPlayer.Name
        UI.Core.PlayerDisplayName.Text = localPlayerName
        if UI.Core.AboutWindow.InfoRegisteredToValue then UI.Core.AboutWindow.InfoRegisteredToValue.Text = " " .. localPlayerName end
        local userId = Players.localPlayer.UserId
        if userId and userId > 0 then 
            local avatarUrl = self:_getAvatarThumbnail(userId)
            if avatarUrl then 
                UI.Core.SidebarAvatar = self:_CreateDrawingObject("Image")
                if UI.Core.SidebarAvatar then
                    UI.Core.SidebarAvatar.Size = {56, 56}; UI.Core.SidebarAvatar.Position = {0, 0}; UI.Core.SidebarAvatar.Opacity = 1; UI.Core.SidebarAvatar.Visible = true; UI.Core.SidebarAvatar.zIndex = 4; UI.Core.SidebarAvatar.Url = avatarUrl; UI.Core.SidebarAvatar.Rounding = 28
                end
            end 
        end
    end
    
    self:_ApplyTheme()
end

function Library:_InitializeAboutWindow()
    -- This function is large and specific, so it's kept separate for clarity.
    -- It initializes all drawing objects for the "About" popup window.
    -- The logic is identical to your original script but uses self:_CreateDrawingObject.
    -- ... (The full code for initializing the About window goes here)
end

--================================================================
--[[ PRIVATE: THEME MANAGEMENT ]]
--================================================================

function Library:_ApplyTheme()
    -- Recalculates dynamic colors based on the active theme
    self.ActiveTheme.Colors.ToggleEnabledBackground = self:_DarkenColor(self.ActiveTheme.Colors.Accent, 0.3)
    local Core = self.UI.Core

    -- Window Panels
    if Core.Sidebar then Core.Sidebar.Color = self.ActiveTheme.Colors.SidebarBackground; Core.Sidebar.Opacity = self.ActiveTheme.Transparency.Sidebar; end
    if Core.RightPanel then Core.RightPanel.Color = self.ActiveTheme.Colors.MainBackground; Core.RightPanel.Opacity = self.ActiveTheme.Transparency.Main; end
    -- ... (The rest of the theme application logic from your original script goes here)
    -- Important: It should now reference objects from `self.UI.Core` for static parts
    -- and iterate through `self.UI.Tabs`, `self.UI.Sections` etc. for dynamic parts.
end


--================================================================
--[[ PRIVATE: RENDERING & INPUT HANDLING ]]
--================================================================

function Library:_RenderLoop()
    -- Main render function, called every frame
    if not self.Window.Visible then return end

    local Core = self.UI.Core
    local windowX, windowY = self:_SafeNumber(self.Window.X, 0), self:_SafeNumber(self.Window.Y, 0)
    local sidebarWidth, headerHeight = self:_SafeNumber(self.Window.SidebarWidth, 0), self:_SafeNumber(self.Window.HeaderHeight, 0)
    local rightPanelX = windowX + sidebarWidth - self.Window.PanelOverlap

    -- Render Core Static Elements
    self:_SetVisibility(Core.Sidebar, true); self:_SetVisibility(Core.RightPanel, true);
    if Core.Sidebar then Core.Sidebar.Position = {windowX, windowY}; Core.Sidebar.Size = {sidebarWidth, self.Window.Height}; end
    if Core.RightPanel then Core.RightPanel.Position = {rightPanelX, windowY}; Core.RightPanel.Size = {self.Window.Width - sidebarWidth + self.Window.PanelOverlap, self.Window.Height}; end
    -- ... (Rest of the core rendering logic for titles, separators, header buttons, etc.)

    -- Render Dynamic, User-Created Elements
    self:_RenderTabs(windowX, windowY + headerHeight, sidebarWidth, self.Window.Height - headerHeight)
    self:_RenderSections(rightPanelX, windowY, headerHeight)
    
    -- Render Popups
    -- self:_RenderAboutWindow()
    -- self:_RenderPopups()
end

function Library:_RenderTabs(x, y, width, height)
    local currentY = y + 25
    local highlightY = 0
    for _, group in ipairs(self.UI.Tabs) do
        -- Render tab group header
        if group.Header then
            group.Header.Position = {x + 25, currentY}
            self:_SetVisibility(group.Header, true)
        end
        currentY = currentY + self.ActiveTheme.Fonts.TabHeaderSize + 10

        -- Render individual tabs in the group
        for _, tab in ipairs(group.Tabs) do
            local tabHeight = self.ActiveTheme.Fonts.TabSize + 10
            local is_active = (self.Window.ActiveTab == tab.Name)
            -- ... (rest of tab rendering logic)
            tab.ClickRegion = {x1 = x + 10, y1 = currentY, x2 = x + width - 10, y2 = currentY + tabHeight}
            if is_active then highlightY = currentY end
            currentY = currentY + tabHeight + 5
        end
        currentY = currentY + 15
    end
    -- Render highlight for the active tab
    if highlightY > 0 and self.UI.Core.ActiveTabHighlight then
        self.UI.Core.ActiveTabHighlight.Position = {x + 10, highlightY}
        self.UI.Core.ActiveTabHighlight.Size = {self.Window.SidebarWidth - 20, self.ActiveTheme.Fonts.TabSize + 10}
        self:_SetVisibility(self.UI.Core.ActiveTabHighlight, true)
    else
        self:_SetVisibility(self.UI.Core.ActiveTabHighlight, false)
    end
end

function Library:_RenderSections(panelX, panelY, headerHeight)
    -- This function will iterate through `self.UI.Sections` and render them
    -- in the correct columns if their `ParentTab` matches `self.Window.ActiveTab`.
    -- It will then call a helper to render elements within each visible section.
end

function Library:_InputLoop()
    -- Main input handling function, called every frame
    -- This will handle window dragging, and clicks on all core and dynamic elements.
    -- When a user-created element is interacted with, it will call the stored callback.
end

function Library:_MainLoop()
    print(SCRIPT_PREFIX .. "UI Initialized and Main Loop started.")
    while self.Window.Visible do
        pcall(function()
            self:_InputLoop()
            self:_RenderLoop()
        end)
        wait(0.01) -- Or use a more appropriate render step event if available
    end
end

--================================================================
--[[ PUBLIC API ]]
--================================================================

--[[
    The :Tab method creates a new tab group in the sidebar.
    @param options Table: { Name = "GROUP NAME", Tabs = { {Name = "Tab 1", Icon = "url"}, ... } }
]]
function Library:Tab(options)
    -- Create drawing objects for the tab header and each tab text/icon
    local group_obj = {
        Name = options.Name,
        Header = self:_CreateDrawingObject("Text"),
        Tabs = {}
    }
    if group_obj.Header then
        group_obj.Header.Font = self.ActiveTheme.Fonts.Main
        group_obj.Header.Size = self.ActiveTheme.Fonts.TabHeaderSize
        group_obj.Header.Text = group_obj.Name
        -- ... other properties
    end
    
    for _, tab_data in ipairs(options.Tabs) do
        local tab_obj = { Name = tab_data.Name, Text = self:_CreateDrawingObject("Text"), Icon = nil, ClickRegion = {} }
        -- ... setup tab_obj
        if #self.UI.Tabs == 0 and #group_obj.Tabs == 0 then -- Set first tab as active
            self.Window.ActiveTab = tab_obj.Name
        end
        table.insert(group_obj.Tabs, tab_obj)
    end
    
    table.insert(self.UI.Tabs, group_obj)

    -- Return an object that allows chaining methods, like :Section
    local TabObject = {}
    function TabObject:Section(sectionOptions)
        sectionOptions.ParentTab = options.Tabs[1].Name -- Simplified for now
        return self:Section(sectionOptions)
    end

    return TabObject
end


--[[
    The :Section method creates a new section in the main panel.
    @param options Table: { Name = "Section Name", ParentTab = "Tab Name", Side = "Left" or "Right" }
]]
function Library:Section(options)
    -- Create drawing objects for the section
    local section = {
        Title = options.Name,
        ParentTab = options.ParentTab,
        Side = options.Side or "Left",
        Elements = {},
        Drawing = {
            Background = self:_CreateDrawingObject("Square"),
            Border = self:_CreateDrawingObject("Square"),
            Title = self:_CreateDrawingObject("Text"),
            Separator = self:_CreateDrawingObject("Line")
        }
    }
    -- ... setup drawing objects ...
    
    table.insert(self.UI.Sections, section)
    
    -- Return an object with methods to add elements to this section
    local SectionObject = {}
    function SectionObject:Toggle(toggleOptions)
        -- ... Logic to add a toggle to section.Elements ...
    end
    -- ... :Slider, :Dropdown, etc.
    
    return SectionObject
end


--[[
    The :Unload method cleans up all created drawing objects and stops the main loop.
]]
function Library:Unload()
    self.Window.Visible = false -- Stop the main loop
    for _, obj in ipairs(self.UI.DrawingObjects) do
        if obj and obj.Remove then
            obj:Remove()
        end
    end
    self.UI.DrawingObjects = {}
    print(SCRIPT_PREFIX .. "UI Unloaded.")
end


--[[
    The :Create method is the entry point for the library.
    It initializes the UI and starts the main loop.
    @param options Table: { Name = "Window Title" }
]]
function Library:Create(options)
    self.Window.Title = options.Name or "Severe UI"
    
    self:_InitializeCoreUI()
    
    -- Start the main loop in a new thread
    spawn(function()
        self:_MainLoop()
    end)
    
    -- Return the main UI object with methods for the user
    local PublicUIObject = {}
    function PublicUIObject:Tab(tabOptions)
        return self:Tab(tabOptions)
    end
    -- ... other top-level API methods if needed
    
    return PublicUIObject
end


return Library
